{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SuperToast [Docs](https://SovietKitsune.github.io/SuperToast) | [Comparison](./topics/comparison.md) About \u00b6 SuperToast is a Discordia command framework designed for ease of use. Installation \u00b6 You can install SuperToast using lit , the package manager of luvit: lit install SovietKitsune/SuperToast Features \u00b6 Dotenv parsing: SuperToast can be able to parse your .env files where you can store secrets. The file format is easy to understand and allows you to keep all your secrets within a secret file. Typed interfaces: SuperToast tends to tell you what you did wrong. If you try to pass a number to Client:addCommand , it'll tell you it expected a command instead. This can help make debugging easier. Useful utility classes and modules: SuperToast has utility modules like a .env parser, millisecond humanizer, string manipulation, command hot reloading and more! EmmyLua types: SuperToast uses EmmyLua in order for you to get intellisense while making your bot which, again, helps decrease the time debugging. Read more about it on the documentation Argument parsing: Out of the box, SuperToast has a fast argument parser which is persistent through errors and gives readable, understandable error messages. Read more about it in the documentation Hot reloading: SuperToast has a new CommandUtil class which provides hot reloading functionality in as little as 4 lines of code. Checks and walls: Sometimes you might need to validate permissions or check that the user meets certain requirements. This can be done with simple function calls within the Command class. Whenever one of these checks fails, it falls onto the errorHandler. More can be learned in the documentation Types \u00b6 SuperToast uses EmmyLua and also includes types for all Discordia objects. In our example, we can view the types of the msg object as seen below. This allows for easier use as you don't need to look at the docs constantly. (Note: Types on callbacks don't work on Lua by Sumneko)","title":"Home"},{"location":"#about","text":"SuperToast is a Discordia command framework designed for ease of use.","title":"About"},{"location":"#installation","text":"You can install SuperToast using lit , the package manager of luvit: lit install SovietKitsune/SuperToast","title":"Installation"},{"location":"#features","text":"Dotenv parsing: SuperToast can be able to parse your .env files where you can store secrets. The file format is easy to understand and allows you to keep all your secrets within a secret file. Typed interfaces: SuperToast tends to tell you what you did wrong. If you try to pass a number to Client:addCommand , it'll tell you it expected a command instead. This can help make debugging easier. Useful utility classes and modules: SuperToast has utility modules like a .env parser, millisecond humanizer, string manipulation, command hot reloading and more! EmmyLua types: SuperToast uses EmmyLua in order for you to get intellisense while making your bot which, again, helps decrease the time debugging. Read more about it on the documentation Argument parsing: Out of the box, SuperToast has a fast argument parser which is persistent through errors and gives readable, understandable error messages. Read more about it in the documentation Hot reloading: SuperToast has a new CommandUtil class which provides hot reloading functionality in as little as 4 lines of code. Checks and walls: Sometimes you might need to validate permissions or check that the user meets certain requirements. This can be done with simple function calls within the Command class. Whenever one of these checks fails, it falls onto the errorHandler. More can be learned in the documentation","title":"Features"},{"location":"#types","text":"SuperToast uses EmmyLua and also includes types for all Discordia objects. In our example, we can view the types of the msg object as seen below. This allows for easier use as you don't need to look at the docs constantly. (Note: Types on callbacks don't work on Lua by Sumneko)","title":"Types"},{"location":"classes/ArgParser/","text":"Class ArgParser \u00b6 An argument parser which can be used in part with commands Methods \u00b6 ArgParser:__init() \u00b6 ArgParser:attach(command: Command ): ArgParser \u00b6 Attach the parser to a command, should be after all flags and arguments ArgParser:arg(func: function , name: string ): ArgParser \u00b6 Register a function to check a passed argument ArgParser:arg(func: function ): ArgParser \u00b6 Register a function to check a passed argument ArgParser:flag(name: string , func: function , typeName: string ): ArgParser.modifiers \u00b6 Register a function to check a passed flag If the flag type is set as a boolean, the presence of the flag is counted as true ArgParser:flag(name: string , func: function ): ArgParser.modifiers \u00b6 Register a function to check a passed flag If the flag type is set as a boolean, the presence of the flag is counted as true ArgParser:parse(str: string , client: Client): table ?, string ? \u00b6 Parse the input, typechecking it along the way ArgParser:_createModifier(ctx: table ): ArgParser.modifiers \u00b6 Internal function for creating modifier packages ArgParser:_parse(str: string ): ArgParser.rawArgs \u00b6 Internal function for parsing arguments, doesn't enforce types or anything else It also leaves a lot of fragments like symbol positions","title":"Class `ArgParser`"},{"location":"classes/ArgParser/#class-argparser","text":"An argument parser which can be used in part with commands","title":"Class ArgParser"},{"location":"classes/ArgParser/#methods","text":"","title":"Methods"},{"location":"classes/ArgParser/#argparser__init","text":"","title":"ArgParser:__init()"},{"location":"classes/ArgParser/#argparserattachcommand-command-argparser","text":"Attach the parser to a command, should be after all flags and arguments","title":"ArgParser:attach(command: Command): ArgParser"},{"location":"classes/ArgParser/#argparserargfunc-function-name-string-argparser","text":"Register a function to check a passed argument","title":"ArgParser:arg(func: function, name: string): ArgParser"},{"location":"classes/ArgParser/#argparserargfunc-function-argparser","text":"Register a function to check a passed argument","title":"ArgParser:arg(func: function): ArgParser"},{"location":"classes/ArgParser/#argparserflagname-string-func-function-typename-string-argparsermodifiers","text":"Register a function to check a passed flag If the flag type is set as a boolean, the presence of the flag is counted as true","title":"ArgParser:flag(name: string, func: function, typeName: string): ArgParser.modifiers"},{"location":"classes/ArgParser/#argparserflagname-string-func-function-argparsermodifiers","text":"Register a function to check a passed flag If the flag type is set as a boolean, the presence of the flag is counted as true","title":"ArgParser:flag(name: string, func: function): ArgParser.modifiers"},{"location":"classes/ArgParser/#argparserparsestr-string-client-client-table-string","text":"Parse the input, typechecking it along the way","title":"ArgParser:parse(str: string, client: Client): table?, string?"},{"location":"classes/ArgParser/#argparser_createmodifierctx-table-argparsermodifiers","text":"Internal function for creating modifier packages","title":"ArgParser:_createModifier(ctx: table): ArgParser.modifiers"},{"location":"classes/ArgParser/#argparser_parsestr-string-argparserrawargs","text":"Internal function for parsing arguments, doesn't enforce types or anything else It also leaves a lot of fragments like symbol positions","title":"ArgParser:_parse(str: string): ArgParser.rawArgs"},{"location":"classes/ArgParser.modifiers/","text":"Class ArgParser.modifiers \u00b6 Modify how flags are parsed Methods \u00b6 ArgParser.modifiers.required(bool: boolean ): ArgParser.modifiers \u00b6 Changes if the flag is required or not ArgParser.modifiers.args(amount: string ): ArgParser.modifiers \u00b6 Changes the amount of required arguments ArgParser.modifiers.finish(): ArgParser \u00b6 Finish configuring the flag and return back to the parser","title":"Class `ArgParser.modifiers`"},{"location":"classes/ArgParser.modifiers/#class-argparsermodifiers","text":"Modify how flags are parsed","title":"Class ArgParser.modifiers"},{"location":"classes/ArgParser.modifiers/#methods","text":"","title":"Methods"},{"location":"classes/ArgParser.modifiers/#argparsermodifiersrequiredbool-boolean-argparsermodifiers","text":"Changes if the flag is required or not","title":"ArgParser.modifiers.required(bool: boolean): ArgParser.modifiers"},{"location":"classes/ArgParser.modifiers/#argparsermodifiersargsamount-string-argparsermodifiers","text":"Changes the amount of required arguments","title":"ArgParser.modifiers.args(amount: string): ArgParser.modifiers"},{"location":"classes/ArgParser.modifiers/#argparsermodifiersfinish-argparser","text":"Finish configuring the flag and return back to the parser","title":"ArgParser.modifiers.finish(): ArgParser"},{"location":"classes/Array/","text":"Class Array \u00b6 An array to store data within Methods \u00b6 Array:__init(starting: any ) \u00b6 Array:__len(): number \u00b6 Get the length of the array Array:__pairs() \u00b6 Loop over the array Array:get(k: number ): any \u00b6 Get an item at a specific index Array:set(k: number , v: any ) \u00b6 Set an item at a specific index Array:iter() \u00b6 Iterate over an array Array:unpack() \u00b6 Unpack the array Array:push(item: any ) \u00b6 Add an item to the end of an array Array:concat(sep: string ) \u00b6 Concat an array Array:pop(pos: number ) \u00b6 Pop the item from the end of the array and return it Array:forEach(fn: fun(key: number , val: any )) \u00b6 Loop over the array and call the function each time Array:filter(fn: fun(val: any )): Array \u00b6 Loop through each item and each item that satisfies the function gets added to an array and gets returned Array:find(fn: fun(val: any ): boolean ): any ? | number ? \u00b6 Return the first value which satisfies the function Array:search(fn: fun(val: any ): any ): any ? | number ? \u00b6 Similar to array:find except returns what the function returns as long as its truthy Array:map(fn: fun(val: any ): any ): Array \u00b6 Create a new array based on the results of the passed function Array:slice(start: number , stop: number , step: number ): Array \u00b6 Slice an array using start, stop, and step Array:copy(): Array \u00b6 Copy an array into a new array Array:reverse(): Array \u00b6 Reverse an array, does not affect original array Array:toTable(): any [] \u00b6 Return the data within the array","title":"Class `Array`"},{"location":"classes/Array/#class-array","text":"An array to store data within","title":"Class Array"},{"location":"classes/Array/#methods","text":"","title":"Methods"},{"location":"classes/Array/#array__initstarting-any","text":"","title":"Array:__init(starting: any)"},{"location":"classes/Array/#array__len-number","text":"Get the length of the array","title":"Array:__len(): number"},{"location":"classes/Array/#array__pairs","text":"Loop over the array","title":"Array:__pairs()"},{"location":"classes/Array/#arraygetk-number-any","text":"Get an item at a specific index","title":"Array:get(k: number): any"},{"location":"classes/Array/#arraysetk-number-v-any","text":"Set an item at a specific index","title":"Array:set(k: number, v: any)"},{"location":"classes/Array/#arrayiter","text":"Iterate over an array","title":"Array:iter()"},{"location":"classes/Array/#arrayunpack","text":"Unpack the array","title":"Array:unpack()"},{"location":"classes/Array/#arraypushitem-any","text":"Add an item to the end of an array","title":"Array:push(item: any)"},{"location":"classes/Array/#arrayconcatsep-string","text":"Concat an array","title":"Array:concat(sep: string)"},{"location":"classes/Array/#arraypoppos-number","text":"Pop the item from the end of the array and return it","title":"Array:pop(pos: number)"},{"location":"classes/Array/#arrayforeachfn-funkey-number-val-any","text":"Loop over the array and call the function each time","title":"Array:forEach(fn: fun(key: number, val: any))"},{"location":"classes/Array/#arrayfilterfn-funval-any-array","text":"Loop through each item and each item that satisfies the function gets added to an array and gets returned","title":"Array:filter(fn: fun(val: any)): Array"},{"location":"classes/Array/#arrayfindfn-funval-any-boolean-any-number","text":"Return the first value which satisfies the function","title":"Array:find(fn: fun(val: any): boolean): any? | number?"},{"location":"classes/Array/#arraysearchfn-funval-any-any-any-number","text":"Similar to array:find except returns what the function returns as long as its truthy","title":"Array:search(fn: fun(val: any): any): any? | number?"},{"location":"classes/Array/#arraymapfn-funval-any-any-array","text":"Create a new array based on the results of the passed function","title":"Array:map(fn: fun(val: any): any): Array"},{"location":"classes/Array/#arrayslicestart-number-stop-number-step-number-array","text":"Slice an array using start, stop, and step","title":"Array:slice(start: number, stop: number, step: number): Array"},{"location":"classes/Array/#arraycopy-array","text":"Copy an array into a new array","title":"Array:copy(): Array"},{"location":"classes/Array/#arrayreverse-array","text":"Reverse an array, does not affect original array","title":"Array:reverse(): Array"},{"location":"classes/Array/#arraytotable-any","text":"Return the data within the array","title":"Array:toTable(): any[]"},{"location":"classes/Command/","text":"Class Command \u00b6 The command class to handle most functionality Properties \u00b6 Property Type Description isSub boolean name string getDescription string getCategory string ? getUsage string getCooldown number flags Command_flags aliases string [] getExamples string [] userPermissions string [] botPermissions string [] subcommands Subcommand [] rawExecute function parent Subcommand ? Methods \u00b6 Command:__init(name: string | function , ...: string | function ) \u00b6 Create a new command Command:checkName(name: string ) \u00b6 Check if the passed name matches what is expected Command:toRun(message: Message, args: string [], client: SuperToastClient ): boolean | string \u00b6 Check a message to see if it matches all the criteria listed Command:description(desc: string ): Command \u00b6 Attach a description to a command Command:category(name: string ): Command \u00b6 Attach a category to a command Command:example(example: string ): Command \u00b6 Attach an example to a command Command:usage(usage: string ): Command \u00b6 Attach a usage to a command Command:guild_only(): Command \u00b6 \ud83d\uded1 This method is deprecated and should not be used Use Command:guildOnly instead Command:guildOnly(): Command \u00b6 Set the command as guild only Command:nsfw_only(): Command \u00b6 \ud83d\uded1 This method is deprecated and should not be used Use Command:nsfwOnly instead Command:nsfwOnly(): Command \u00b6 Set the command as nsfw only Command:owner_only(): Command \u00b6 \ud83d\uded1 This method is deprecated and should not be used Use Command:ownerOnly instead Command:ownerOnly(): Command \u00b6 Set the command as owner only Command:cooldown(cooldown: number ): Command \u00b6 Set the cooldown of the command Command:check(check: fun(msg: Message, args: string [], client: SuperToastClient ): string | boolean | string ): Command \u00b6 Add a custom check to the command Command:check_any(...: function ): Command \u00b6 \ud83d\uded1 This method is deprecated and should not be used Use Command:checkAny instead Command:checkAny(...: function ): Command \u00b6 Add multiple custom checks Command:has_permission(perm: string | number ): Command \u00b6 \ud83d\uded1 This method is deprecated and should not be used Use Command:hasPermission instead Command:hasPermission(perm: string | number ): Command \u00b6 Add permission check for users Command:has_permissions(...: string | number ): Command \u00b6 \ud83d\uded1 This method is deprecated and should not be used Use Command:hasPermission instead Command:hasPermissions(...: string | number ): Command \u00b6 Add multiple permission checks for users Command:bot_has_permission(perm: string | number ): Command \u00b6 \ud83d\uded1 This method is deprecated and should not be used Use Command:botHasPermission instead Command:botHasPermission(perm: string | number ): Command \u00b6 Add permission check for the bot Command:bot_has_permissions(...: string | number ): Command \u00b6 \ud83d\uded1 This method is deprecated and should not be used Use Command:botHasPermissions instead Command:botHasPermissions(...: string | number ): Command \u00b6 Add multiple permission checks for the bot Command:has_role(role: string ): Command \u00b6 \ud83d\uded1 This method is deprecated and should not be used Use Command:hasRole instead Command:hasRole(role: string ): Command \u00b6 Check if the user has a specific role Command:add_subcommand(subcommand: Subcommand ): Command \u00b6 \ud83d\uded1 This method is deprecated and should not be used Use Command:addSubcommand instead Command:addSubcommand(subcommand: Subcommand ): Command \u00b6 Add a subcommand to the function Command:execute(func: fun(msg: Message, args: string [], client: SuperToastClient , ctx: Command_additionalContext ): void): Command \u00b6 Sets the function to execute Command.count(): number \u00b6 Count the amount of parents up this (sub)command has Command.pattern(pattern: string ): function \u00b6 A factory for creating commands that rely on patterns","title":"Class `Command`"},{"location":"classes/Command/#class-command","text":"The command class to handle most functionality","title":"Class Command"},{"location":"classes/Command/#properties","text":"Property Type Description isSub boolean name string getDescription string getCategory string ? getUsage string getCooldown number flags Command_flags aliases string [] getExamples string [] userPermissions string [] botPermissions string [] subcommands Subcommand [] rawExecute function parent Subcommand ?","title":"Properties"},{"location":"classes/Command/#methods","text":"","title":"Methods"},{"location":"classes/Command/#command__initname-string-function-string-function","text":"Create a new command","title":"Command:__init(name: string | function, ...: string | function)"},{"location":"classes/Command/#commandchecknamename-string","text":"Check if the passed name matches what is expected","title":"Command:checkName(name: string)"},{"location":"classes/Command/#commandtorunmessage-message-args-string-client-supertoastclient-boolean-string","text":"Check a message to see if it matches all the criteria listed","title":"Command:toRun(message: Message, args: string[], client: SuperToastClient): boolean | string"},{"location":"classes/Command/#commanddescriptiondesc-string-command","text":"Attach a description to a command","title":"Command:description(desc: string): Command"},{"location":"classes/Command/#commandcategoryname-string-command","text":"Attach a category to a command","title":"Command:category(name: string): Command"},{"location":"classes/Command/#commandexampleexample-string-command","text":"Attach an example to a command","title":"Command:example(example: string): Command"},{"location":"classes/Command/#commandusageusage-string-command","text":"Attach a usage to a command","title":"Command:usage(usage: string): Command"},{"location":"classes/Command/#commandguild_only-command","text":"\ud83d\uded1 This method is deprecated and should not be used Use Command:guildOnly instead","title":"Command:guild_only(): Command"},{"location":"classes/Command/#commandguildonly-command","text":"Set the command as guild only","title":"Command:guildOnly(): Command"},{"location":"classes/Command/#commandnsfw_only-command","text":"\ud83d\uded1 This method is deprecated and should not be used Use Command:nsfwOnly instead","title":"Command:nsfw_only(): Command"},{"location":"classes/Command/#commandnsfwonly-command","text":"Set the command as nsfw only","title":"Command:nsfwOnly(): Command"},{"location":"classes/Command/#commandowner_only-command","text":"\ud83d\uded1 This method is deprecated and should not be used Use Command:ownerOnly instead","title":"Command:owner_only(): Command"},{"location":"classes/Command/#commandowneronly-command","text":"Set the command as owner only","title":"Command:ownerOnly(): Command"},{"location":"classes/Command/#commandcooldowncooldown-number-command","text":"Set the cooldown of the command","title":"Command:cooldown(cooldown: number): Command"},{"location":"classes/Command/#commandcheckcheck-funmsg-message-args-string-client-supertoastclient-string-boolean-string-command","text":"Add a custom check to the command","title":"Command:check(check: fun(msg: Message, args: string[], client: SuperToastClient): string | boolean | string): Command"},{"location":"classes/Command/#commandcheck_any-function-command","text":"\ud83d\uded1 This method is deprecated and should not be used Use Command:checkAny instead","title":"Command:check_any(...: function): Command"},{"location":"classes/Command/#commandcheckany-function-command","text":"Add multiple custom checks","title":"Command:checkAny(...: function): Command"},{"location":"classes/Command/#commandhas_permissionperm-string-number-command","text":"\ud83d\uded1 This method is deprecated and should not be used Use Command:hasPermission instead","title":"Command:has_permission(perm: string | number): Command"},{"location":"classes/Command/#commandhaspermissionperm-string-number-command","text":"Add permission check for users","title":"Command:hasPermission(perm: string | number): Command"},{"location":"classes/Command/#commandhas_permissions-string-number-command","text":"\ud83d\uded1 This method is deprecated and should not be used Use Command:hasPermission instead","title":"Command:has_permissions(...: string | number): Command"},{"location":"classes/Command/#commandhaspermissions-string-number-command","text":"Add multiple permission checks for users","title":"Command:hasPermissions(...: string | number): Command"},{"location":"classes/Command/#commandbot_has_permissionperm-string-number-command","text":"\ud83d\uded1 This method is deprecated and should not be used Use Command:botHasPermission instead","title":"Command:bot_has_permission(perm: string | number): Command"},{"location":"classes/Command/#commandbothaspermissionperm-string-number-command","text":"Add permission check for the bot","title":"Command:botHasPermission(perm: string | number): Command"},{"location":"classes/Command/#commandbot_has_permissions-string-number-command","text":"\ud83d\uded1 This method is deprecated and should not be used Use Command:botHasPermissions instead","title":"Command:bot_has_permissions(...: string | number): Command"},{"location":"classes/Command/#commandbothaspermissions-string-number-command","text":"Add multiple permission checks for the bot","title":"Command:botHasPermissions(...: string | number): Command"},{"location":"classes/Command/#commandhas_rolerole-string-command","text":"\ud83d\uded1 This method is deprecated and should not be used Use Command:hasRole instead","title":"Command:has_role(role: string): Command"},{"location":"classes/Command/#commandhasrolerole-string-command","text":"Check if the user has a specific role","title":"Command:hasRole(role: string): Command"},{"location":"classes/Command/#commandadd_subcommandsubcommand-subcommand-command","text":"\ud83d\uded1 This method is deprecated and should not be used Use Command:addSubcommand instead","title":"Command:add_subcommand(subcommand: Subcommand): Command"},{"location":"classes/Command/#commandaddsubcommandsubcommand-subcommand-command","text":"Add a subcommand to the function","title":"Command:addSubcommand(subcommand: Subcommand): Command"},{"location":"classes/Command/#commandexecutefunc-funmsg-message-args-string-client-supertoastclient-ctx-command_additionalcontext-void-command","text":"Sets the function to execute","title":"Command:execute(func: fun(msg: Message, args: string[], client: SuperToastClient, ctx: Command_additionalContext): void): Command"},{"location":"classes/Command/#commandcount-number","text":"Count the amount of parents up this (sub)command has","title":"Command.count(): number"},{"location":"classes/Command/#commandpatternpattern-string-function","text":"A factory for creating commands that rely on patterns","title":"Command.pattern(pattern: string): function"},{"location":"classes/CommandUtil/","text":"Class CommandUtil \u00b6 Command util is a class which loads commands from directories. Methods \u00b6 CommandUtil:__init(client: SuperToastClient , config: CommandUtil_config ) \u00b6 Create a new command utility CommandUtil:cleanup() \u00b6 Cleanup the parts which are not critical. The parts which are considered not critical would be indexed files and fs handles. CommandUtil:_load(path: string , event: _events, contents: string ?) \u00b6 Default command loader CommandUtil:_watch(path: string , cb: function ) \u00b6 Load a command into the handler Watch a directory CommandUtil:_index(dir: string ) \u00b6 Index a directory for all the files within it","title":"Class `CommandUtil`"},{"location":"classes/CommandUtil/#class-commandutil","text":"Command util is a class which loads commands from directories.","title":"Class CommandUtil"},{"location":"classes/CommandUtil/#methods","text":"","title":"Methods"},{"location":"classes/CommandUtil/#commandutil__initclient-supertoastclient-config-commandutil_config","text":"Create a new command utility","title":"CommandUtil:__init(client: SuperToastClient, config: CommandUtil_config)"},{"location":"classes/CommandUtil/#commandutilcleanup","text":"Cleanup the parts which are not critical. The parts which are considered not critical would be indexed files and fs handles.","title":"CommandUtil:cleanup()"},{"location":"classes/CommandUtil/#commandutil_loadpath-string-event-_events-contents-string","text":"Default command loader","title":"CommandUtil:_load(path: string, event: _events, contents: string?)"},{"location":"classes/CommandUtil/#commandutil_watchpath-string-cb-function","text":"Load a command into the handler Watch a directory","title":"CommandUtil:_watch(path: string, cb: function)"},{"location":"classes/CommandUtil/#commandutil_indexdir-string","text":"Index a directory for all the files within it","title":"CommandUtil:_index(dir: string)"},{"location":"classes/CommandUtil_config/","text":"Class CommandUtil_config \u00b6 | \"'unload'\" | \"'changed'\" | \"'firstLoad'\" Properties \u00b6 Property Type Description directory string The directory to search for commands watch boolean ? If set to true, it will watch directory for changes unloadOnError boolean ? If set to true, it will unload the command if it had an error loading","title":"Class `CommandUtil_config`"},{"location":"classes/CommandUtil_config/#class-commandutil_config","text":"| \"'unload'\" | \"'changed'\" | \"'firstLoad'\"","title":"Class CommandUtil_config"},{"location":"classes/CommandUtil_config/#properties","text":"Property Type Description directory string The directory to search for commands watch boolean ? If set to true, it will watch directory for changes unloadOnError boolean ? If set to true, it will unload the command if it had an error loading","title":"Properties"},{"location":"classes/Embed/","text":"Class Embed \u00b6 An embed class to allow structuring embeds easier Methods \u00b6 Embed:__init(starting: Embed_raw ): Embed \u00b6 Create a new embed Embed:setTitle(title: string ): Embed \u00b6 Set the title of the embed Embed:setDescription(desc: string ): Embed \u00b6 Set the description of the embed Embed:setColor(color: number ): Embed \u00b6 Set the color of the embed Embed:addField(name: string , value: string , inline: boolean , ignore: boolean ): Embed \u00b6 Add a field to the embed Embed:setAuthor(name: string , icon: string , url: string ): Embed \u00b6 Set the author of the embed Embed:setFooter(text: string , icon: string ): Embed \u00b6 Set the footer of the embed Embed:setImage(img: string ): Embed \u00b6 Set the image of the embed Embed:setThumbnail(url: string ): Embed \u00b6 Set the thumbnail of the embed Embed:setTimestamp(date: string ): Embed \u00b6 Set the timestamp of the embed Embed:setURL(): Embed \u00b6 Set the url of the embed Embed:toJSON(): Embed_raw \u00b6 Return the contents within the embed Embed:send(channel: TextChannel): Message?, string ? \u00b6 Send an embed to a channel","title":"Class `Embed`"},{"location":"classes/Embed/#class-embed","text":"An embed class to allow structuring embeds easier","title":"Class Embed"},{"location":"classes/Embed/#methods","text":"","title":"Methods"},{"location":"classes/Embed/#embed__initstarting-embed_raw-embed","text":"Create a new embed","title":"Embed:__init(starting: Embed_raw): Embed"},{"location":"classes/Embed/#embedsettitletitle-string-embed","text":"Set the title of the embed","title":"Embed:setTitle(title: string): Embed"},{"location":"classes/Embed/#embedsetdescriptiondesc-string-embed","text":"Set the description of the embed","title":"Embed:setDescription(desc: string): Embed"},{"location":"classes/Embed/#embedsetcolorcolor-number-embed","text":"Set the color of the embed","title":"Embed:setColor(color: number): Embed"},{"location":"classes/Embed/#embedaddfieldname-string-value-string-inline-boolean-ignore-boolean-embed","text":"Add a field to the embed","title":"Embed:addField(name: string, value: string, inline: boolean, ignore: boolean): Embed"},{"location":"classes/Embed/#embedsetauthorname-string-icon-string-url-string-embed","text":"Set the author of the embed","title":"Embed:setAuthor(name: string, icon: string, url: string): Embed"},{"location":"classes/Embed/#embedsetfootertext-string-icon-string-embed","text":"Set the footer of the embed","title":"Embed:setFooter(text: string, icon: string): Embed"},{"location":"classes/Embed/#embedsetimageimg-string-embed","text":"Set the image of the embed","title":"Embed:setImage(img: string): Embed"},{"location":"classes/Embed/#embedsetthumbnailurl-string-embed","text":"Set the thumbnail of the embed","title":"Embed:setThumbnail(url: string): Embed"},{"location":"classes/Embed/#embedsettimestampdate-string-embed","text":"Set the timestamp of the embed","title":"Embed:setTimestamp(date: string): Embed"},{"location":"classes/Embed/#embedseturl-embed","text":"Set the url of the embed","title":"Embed:setURL(): Embed"},{"location":"classes/Embed/#embedtojson-embed_raw","text":"Return the contents within the embed","title":"Embed:toJSON(): Embed_raw"},{"location":"classes/Embed/#embedsendchannel-textchannel-message-string","text":"Send an embed to a channel","title":"Embed:send(channel: TextChannel): Message?, string?"},{"location":"classes/Option/","text":"Class Option \u00b6 A class to typecheck option listings Methods \u00b6 Option:__init(dict: any ) \u00b6 Option:validate(dict: table< string , any >): nil \u00b6 Validate a dictionary, it will error if it meets an invalid type! Option:toTable(): string \u00b6 Returns a string representing the options as an EmmyLua class","title":"Class `Option`"},{"location":"classes/Option/#class-option","text":"A class to typecheck option listings","title":"Class Option"},{"location":"classes/Option/#methods","text":"","title":"Methods"},{"location":"classes/Option/#option__initdict-any","text":"","title":"Option:__init(dict: any)"},{"location":"classes/Option/#optionvalidatedict-tablestring-any-nil","text":"Validate a dictionary, it will error if it meets an invalid type!","title":"Option:validate(dict: table&lt;string, any&gt;): nil"},{"location":"classes/Option/#optiontotable-string","text":"Returns a string representing the options as an EmmyLua class","title":"Option:toTable(): string"},{"location":"classes/Schema/","text":"Class Schema \u00b6 The schema object used to validate tables Methods \u00b6 Schema:__init(name: string ): Schema \u00b6 Create a new schema Schema:field(name: string , value: string | Schema , default: any ): Schema \u00b6 Create a new field within the schema Schema:validate(tbl: table< any , any >): table< any , any > | boolean , string ? \u00b6 Validate a table to see if it matches the schema","title":"Class `Schema`"},{"location":"classes/Schema/#class-schema","text":"The schema object used to validate tables","title":"Class Schema"},{"location":"classes/Schema/#methods","text":"","title":"Methods"},{"location":"classes/Schema/#schema__initname-string-schema","text":"Create a new schema","title":"Schema:__init(name: string): Schema"},{"location":"classes/Schema/#schemafieldname-string-value-string-schema-default-any-schema","text":"Create a new field within the schema","title":"Schema:field(name: string, value: string | Schema, default: any): Schema"},{"location":"classes/Schema/#schemavalidatetbl-tableany-any-tableany-any-boolean-string","text":"Validate a table to see if it matches the schema","title":"Schema:validate(tbl: table&lt;any, any&gt;): table&lt;any, any&gt; | boolean, string?"},{"location":"classes/Subcommand/","text":"Class Subcommand \u00b6 A subcommand to act as a mini command Methods \u00b6 Subcommand:__init(parent: Command , name: string ) \u00b6 Create a new command Subcommand:count(): number \u00b6 Count the amount of parents up this subcommand has Subcommand:execute(func: fun(msg: Message, args: string [], client: SuperToastClient )): Command \u00b6 Sets the function to execute","title":"Class `Subcommand`"},{"location":"classes/Subcommand/#class-subcommand","text":"A subcommand to act as a mini command","title":"Class Subcommand"},{"location":"classes/Subcommand/#methods","text":"","title":"Methods"},{"location":"classes/Subcommand/#subcommand__initparent-command-name-string","text":"Create a new command","title":"Subcommand:__init(parent: Command, name: string)"},{"location":"classes/Subcommand/#subcommandcount-number","text":"Count the amount of parents up this subcommand has","title":"Subcommand:count(): number"},{"location":"classes/Subcommand/#subcommandexecutefunc-funmsg-message-args-string-client-supertoastclient-command","text":"Sets the function to execute","title":"Subcommand:execute(func: fun(msg: Message, args: string[], client: SuperToastClient)): Command"},{"location":"classes/SuperToastClient/","text":"Class SuperToastClient \u00b6 The SuperToast client with all the fun features Properties \u00b6 Property Type Description commands TypedArray config SuperToastOptions owners string [] mentionPrefix string Methods \u00b6 SuperToastClient:__init(token: string , options: SuperToastClient , discOptions: DiscordiaOptions ): SuperToastClient \u00b6 Create a new SuperToast client SuperToastClient:login(presence: table< string , any >) \u00b6 Connect and login SuperToastClient:login() \u00b6 Connect and login SuperToastClient:addCommand(command: Command ) \u00b6 Register a command to the client SuperToastClient:removeCommand(command: Command ) \u00b6 Remove a subcommand from the client SuperToastClient:reply(msg: Message, content: string | table , mention: boolean ): Message \u00b6 Send a reply to a message","title":"Class `SuperToastClient`"},{"location":"classes/SuperToastClient/#class-supertoastclient","text":"The SuperToast client with all the fun features","title":"Class SuperToastClient"},{"location":"classes/SuperToastClient/#properties","text":"Property Type Description commands TypedArray config SuperToastOptions owners string [] mentionPrefix string","title":"Properties"},{"location":"classes/SuperToastClient/#methods","text":"","title":"Methods"},{"location":"classes/SuperToastClient/#supertoastclient__inittoken-string-options-supertoastclient-discoptions-discordiaoptions-supertoastclient","text":"Create a new SuperToast client","title":"SuperToastClient:__init(token: string, options: SuperToastClient, discOptions: DiscordiaOptions): SuperToastClient"},{"location":"classes/SuperToastClient/#supertoastclientloginpresence-tablestring-any","text":"Connect and login","title":"SuperToastClient:login(presence: table&lt;string, any&gt;)"},{"location":"classes/SuperToastClient/#supertoastclientlogin","text":"Connect and login","title":"SuperToastClient:login()"},{"location":"classes/SuperToastClient/#supertoastclientaddcommandcommand-command","text":"Register a command to the client","title":"SuperToastClient:addCommand(command: Command)"},{"location":"classes/SuperToastClient/#supertoastclientremovecommandcommand-command","text":"Remove a subcommand from the client","title":"SuperToastClient:removeCommand(command: Command)"},{"location":"classes/SuperToastClient/#supertoastclientreplymsg-message-content-string-table-mention-boolean-message","text":"Send a reply to a message","title":"SuperToastClient:reply(msg: Message, content: string | table, mention: boolean): Message"},{"location":"classes/TypedArray/","text":"Class TypedArray \u00b6 A typed version of an array only allowing certain elements within Properties \u00b6 Property Type Description type function The type of the data Methods \u00b6 TypedArray:__init(arrType: any , starting: any ) \u00b6 TypedArray:push(item: any ) \u00b6 A typed version of the push method","title":"Class `TypedArray`"},{"location":"classes/TypedArray/#class-typedarray","text":"A typed version of an array only allowing certain elements within","title":"Class TypedArray"},{"location":"classes/TypedArray/#properties","text":"Property Type Description type function The type of the data","title":"Properties"},{"location":"classes/TypedArray/#methods","text":"","title":"Methods"},{"location":"classes/TypedArray/#typedarray__initarrtype-any-starting-any","text":"","title":"TypedArray:__init(arrType: any, starting: any)"},{"location":"classes/TypedArray/#typedarraypushitem-any","text":"A typed version of the push method","title":"TypedArray:push(item: any)"},{"location":"classes/typed/","text":"Class typed \u00b6 Typed \u00b6 A module to aid in allowing for typed code Typed gives clean errors that look like errors from misused standard functions bad argument #1 to 'tostring' (string | function expected, got nil) Quick example \u00b6 local typed = require 'typed' local function hi ( msg ) typed . func ( _ , 'string' )( msg ) print ( msg ) end hi ( 'hello' ) -- No errors hi ( 1 ) -- bad argument #1 to 'hi' (string expected, got number) Typed can automatically figure out the name of the function, however, if you want to replace it, you pass the first argument. Tables and arrays \u00b6 Typed also supports arrays and tables in its definitions. An array is type followed by [] while a table is table<keyType, valueType> . By default, an empty table {} would be unknown[] . This is as it can't be inferred what it is. Logical statements \u00b6 Currently typed only supports the or logical operator. local typed = require 'typed' local function hi ( msg ) typed . func ( _ , 'string | number' )( msg ) print ( msg ) end hi ( 'hello' ) -- No errors hi ( 1 ) -- No errors Here is the first example using the or operator represented with | . It does exactly what you would think it does, it will accept strings or numbers. Methods \u00b6 typed.isArray(tbl: table< any , any >): boolean \u00b6 Is this an array? typed.whatIs(this: any ): string \u00b6 What is this specific item? Note: This can be overridden with __name or __type field. Arrays are represented with type[] and tables with table<keyType, valueType> . typed.resolve(validator: string , pos: number ?, name: string ?): fun(x: any ): boolean ? | string ? \u00b6 Create a new function to validate types This is commonly piped into assert and should be used in environments without debug . typed.is(validator: string , value: any ): boolean \u00b6 Check if the value matches the validator . Used internally by `typed.resolve typed.func(name: string ?, ...: string ): function \u00b6 Create a new typed function. This function uses the debug library You can override the inferred name by passing a first argument. The rest of the arguments are validation strings. This returns a function which would take those arguments defined in the validation string. typed.typedDict(keyType: string , valueType: string ): table< any , any > \u00b6 Create a typed dictionary allowing only specific key and value types","title":"Class `typed`"},{"location":"classes/typed/#class-typed","text":"","title":"Class typed"},{"location":"classes/typed/#typed","text":"A module to aid in allowing for typed code Typed gives clean errors that look like errors from misused standard functions bad argument #1 to 'tostring' (string | function expected, got nil)","title":"Typed"},{"location":"classes/typed/#quick-example","text":"local typed = require 'typed' local function hi ( msg ) typed . func ( _ , 'string' )( msg ) print ( msg ) end hi ( 'hello' ) -- No errors hi ( 1 ) -- bad argument #1 to 'hi' (string expected, got number) Typed can automatically figure out the name of the function, however, if you want to replace it, you pass the first argument.","title":"Quick example"},{"location":"classes/typed/#tables-and-arrays","text":"Typed also supports arrays and tables in its definitions. An array is type followed by [] while a table is table<keyType, valueType> . By default, an empty table {} would be unknown[] . This is as it can't be inferred what it is.","title":"Tables and arrays"},{"location":"classes/typed/#logical-statements","text":"Currently typed only supports the or logical operator. local typed = require 'typed' local function hi ( msg ) typed . func ( _ , 'string | number' )( msg ) print ( msg ) end hi ( 'hello' ) -- No errors hi ( 1 ) -- No errors Here is the first example using the or operator represented with | . It does exactly what you would think it does, it will accept strings or numbers.","title":"Logical statements"},{"location":"classes/typed/#methods","text":"","title":"Methods"},{"location":"classes/typed/#typedisarraytbl-tableany-any-boolean","text":"Is this an array?","title":"typed.isArray(tbl: table&lt;any, any&gt;): boolean"},{"location":"classes/typed/#typedwhatisthis-any-string","text":"What is this specific item? Note: This can be overridden with __name or __type field. Arrays are represented with type[] and tables with table<keyType, valueType> .","title":"typed.whatIs(this: any): string"},{"location":"classes/typed/#typedresolvevalidator-string-pos-number-name-string-funx-any-boolean-string","text":"Create a new function to validate types This is commonly piped into assert and should be used in environments without debug .","title":"typed.resolve(validator: string, pos: number?, name: string?): fun(x: any): boolean? | string?"},{"location":"classes/typed/#typedisvalidator-string-value-any-boolean","text":"Check if the value matches the validator . Used internally by `typed.resolve","title":"typed.is(validator: string, value: any): boolean"},{"location":"classes/typed/#typedfuncname-string-string-function","text":"Create a new typed function. This function uses the debug library You can override the inferred name by passing a first argument. The rest of the arguments are validation strings. This returns a function which would take those arguments defined in the validation string.","title":"typed.func(name: string?, ...: string): function"},{"location":"classes/typed/#typedtypeddictkeytype-string-valuetype-string-tableany-any","text":"Create a typed dictionary allowing only specific key and value types","title":"typed.typedDict(keyType: string, valueType: string): table&lt;any, any&gt;"},{"location":"modules/SuperToast/","text":"Module SuperToast \u00b6 The SuperToast module Re-exports \u00b6 Client : The SuperToast client with all the fun features Command : The command class to handle most functionality TypedArray : A typed version of an array only allowing certain elements within Option : A class to typecheck option listings dotenv : Dotenv parsing module typed : # Typed ArgParser : An argument parser which can be used in part with commands ms : Utility for managing time stringx : String utility library Array : An array to store data within Subcommand : A subcommand to act as a mini command Embed : An embed class to allow structuring embeds easier","title":"Module `SuperToast`"},{"location":"modules/SuperToast/#module-supertoast","text":"The SuperToast module","title":"Module SuperToast"},{"location":"modules/SuperToast/#re-exports","text":"Client : The SuperToast client with all the fun features Command : The command class to handle most functionality TypedArray : A typed version of an array only allowing certain elements within Option : A class to typecheck option listings dotenv : Dotenv parsing module typed : # Typed ArgParser : An argument parser which can be used in part with commands ms : Utility for managing time stringx : String utility library Array : An array to store data within Subcommand : A subcommand to act as a mini command Embed : An embed class to allow structuring embeds easier","title":"Re-exports"},{"location":"modules/dotenv/","text":"Module dotenv \u00b6 Dotenv parsing module Functions \u00b6 dotenv.parse(src: string , options: table< string , boolean >): table< string , any > \u00b6 Parse a dotenv file and return the data dotenv.parse(src: string ): table< string , any > \u00b6 Parse a dotenv file and return the data dotenv.config(options: table< string , any >) \u00b6 Load a .env file into the current env dotenv.config() \u00b6 Load a .env file into the current env","title":"Module `dotenv`"},{"location":"modules/dotenv/#module-dotenv","text":"Dotenv parsing module","title":"Module dotenv"},{"location":"modules/dotenv/#functions","text":"","title":"Functions"},{"location":"modules/dotenv/#dotenvparsesrc-string-options-tablestring-boolean-tablestring-any","text":"Parse a dotenv file and return the data","title":"dotenv.parse(src: string, options: table&lt;string, boolean&gt;): table&lt;string, any&gt;"},{"location":"modules/dotenv/#dotenvparsesrc-string-tablestring-any","text":"Parse a dotenv file and return the data","title":"dotenv.parse(src: string): table&lt;string, any&gt;"},{"location":"modules/dotenv/#dotenvconfigoptions-tablestring-any","text":"Load a .env file into the current env","title":"dotenv.config(options: table&lt;string, any&gt;)"},{"location":"modules/dotenv/#dotenvconfig","text":"Load a .env file into the current env","title":"dotenv.config()"},{"location":"modules/ms/","text":"Module ms \u00b6 Utility for managing time Functions \u00b6 ms.years(years: number ): number \u00b6 Get the amount of milliseconds in x years ms.weeks(weeks: number ): number \u00b6 Get the amount of milliseconds in x weeks ms.days(days: number ): number \u00b6 Get the amount of milliseconds in x days ms.hours(hours: number ): number \u00b6 Get the amount of milliseconds in x hours ms.minutes(minutes: number ): number \u00b6 Get the amount of milliseconds in x minutes ms.seconds(seconds: number ): number \u00b6 Get the amount of milliseconds in x seconds ms.formatLong(milliseconds: number ): string \u00b6 Format the milliseconds in a long way eg 10 seconds ms.plural(mili: number , msAbs: number , n: number , name: string ): string \u00b6 Pluralize an amount of time","title":"Module `ms`"},{"location":"modules/ms/#module-ms","text":"Utility for managing time","title":"Module ms"},{"location":"modules/ms/#functions","text":"","title":"Functions"},{"location":"modules/ms/#msyearsyears-number-number","text":"Get the amount of milliseconds in x years","title":"ms.years(years: number): number"},{"location":"modules/ms/#msweeksweeks-number-number","text":"Get the amount of milliseconds in x weeks","title":"ms.weeks(weeks: number): number"},{"location":"modules/ms/#msdaysdays-number-number","text":"Get the amount of milliseconds in x days","title":"ms.days(days: number): number"},{"location":"modules/ms/#mshourshours-number-number","text":"Get the amount of milliseconds in x hours","title":"ms.hours(hours: number): number"},{"location":"modules/ms/#msminutesminutes-number-number","text":"Get the amount of milliseconds in x minutes","title":"ms.minutes(minutes: number): number"},{"location":"modules/ms/#mssecondsseconds-number-number","text":"Get the amount of milliseconds in x seconds","title":"ms.seconds(seconds: number): number"},{"location":"modules/ms/#msformatlongmilliseconds-number-string","text":"Format the milliseconds in a long way eg 10 seconds","title":"ms.formatLong(milliseconds: number): string"},{"location":"modules/ms/#mspluralmili-number-msabs-number-n-number-name-string-string","text":"Pluralize an amount of time","title":"ms.plural(mili: number, msAbs: number, n: number, name: string): string"},{"location":"modules/stringx/","text":"Module stringx \u00b6 String utility library Functions \u00b6 stringx.split(str: string , separator: string ): string [] \u00b6 Split a string by a separator stringx.trim(str: string ): string \u00b6 Trim whitespace around a string stringx.startswith(str: string , start: string ): boolean \u00b6 Check if a string starts with another string stringx.endswith(str: string , ends: string ): boolean \u00b6 Check if a string ends with another string stringx.random(len: number , mn: number , mx: number ): string \u00b6 Return a string of random characters with the length of len and between min and max stringx.pad(str: string , len: number , align: string , pattern: string ): string \u00b6 Put spaces around a string stringx.levenshtein(str1: string , str2: string ): number \u00b6 Get the difference between 2 strings stringx.shorten(str: string , width: number , tail: boolean ): string \u00b6 Shorten a string to be prefixed or suffixed by ellipsis stringx.fancyformat(str: string ): function \u00b6 Makes a factory to \"fancy\" format a string","title":"Module `stringx`"},{"location":"modules/stringx/#module-stringx","text":"String utility library","title":"Module stringx"},{"location":"modules/stringx/#functions","text":"","title":"Functions"},{"location":"modules/stringx/#stringxsplitstr-string-separator-string-string","text":"Split a string by a separator","title":"stringx.split(str: string, separator: string): string[]"},{"location":"modules/stringx/#stringxtrimstr-string-string","text":"Trim whitespace around a string","title":"stringx.trim(str: string): string"},{"location":"modules/stringx/#stringxstartswithstr-string-start-string-boolean","text":"Check if a string starts with another string","title":"stringx.startswith(str: string, start: string): boolean"},{"location":"modules/stringx/#stringxendswithstr-string-ends-string-boolean","text":"Check if a string ends with another string","title":"stringx.endswith(str: string, ends: string): boolean"},{"location":"modules/stringx/#stringxrandomlen-number-mn-number-mx-number-string","text":"Return a string of random characters with the length of len and between min and max","title":"stringx.random(len: number, mn: number, mx: number): string"},{"location":"modules/stringx/#stringxpadstr-string-len-number-align-string-pattern-string-string","text":"Put spaces around a string","title":"stringx.pad(str: string, len: number, align: string, pattern: string): string"},{"location":"modules/stringx/#stringxlevenshteinstr1-string-str2-string-number","text":"Get the difference between 2 strings","title":"stringx.levenshtein(str1: string, str2: string): number"},{"location":"modules/stringx/#stringxshortenstr-string-width-number-tail-boolean-string","text":"Shorten a string to be prefixed or suffixed by ellipsis","title":"stringx.shorten(str: string, width: number, tail: boolean): string"},{"location":"modules/stringx/#stringxfancyformatstr-string-function","text":"Makes a factory to \"fancy\" format a string","title":"stringx.fancyformat(str: string): function"},{"location":"structures/ArgParser.rawArgs/","text":"Structure ArgParser.rawArgs \u00b6 Declaration \u00b6 ArgParser . rawArgs = { flags = table < string , string [] > , arguments = string [] } Fields \u00b6 Field Type Description flags table< string , string [] > arguments string []","title":"Structure `ArgParser.rawArgs`"},{"location":"structures/ArgParser.rawArgs/#structure-argparserrawargs","text":"","title":"Structure ArgParser.rawArgs"},{"location":"structures/ArgParser.rawArgs/#declaration","text":"ArgParser . rawArgs = { flags = table < string , string [] > , arguments = string [] }","title":"Declaration"},{"location":"structures/ArgParser.rawArgs/#fields","text":"Field Type Description flags table< string , string [] > arguments string []","title":"Fields"},{"location":"structures/Command_additionalContext/","text":"Structure Command_additionalContext \u00b6 Additional information about the context Declaration \u00b6 local Command_additionalContext = { prefix = string } Fields \u00b6 Field Type Description prefix string The prefix that was used","title":"Structure `Command_additionalContext`"},{"location":"structures/Command_additionalContext/#structure-command_additionalcontext","text":"Additional information about the context","title":"Structure Command_additionalContext"},{"location":"structures/Command_additionalContext/#declaration","text":"local Command_additionalContext = { prefix = string }","title":"Declaration"},{"location":"structures/Command_additionalContext/#fields","text":"Field Type Description prefix string The prefix that was used","title":"Fields"},{"location":"structures/Command_flags/","text":"Structure Command_flags \u00b6 Flags which the command could have Declaration \u00b6 local Command_flags = { guildOnly = boolean , nsfwOnly = boolean , ownerOnly = boolean } Fields \u00b6 Field Type Description guildOnly boolean nsfwOnly boolean ownerOnly boolean","title":"Structure `Command_flags`"},{"location":"structures/Command_flags/#structure-command_flags","text":"Flags which the command could have","title":"Structure Command_flags"},{"location":"structures/Command_flags/#declaration","text":"local Command_flags = { guildOnly = boolean , nsfwOnly = boolean , ownerOnly = boolean }","title":"Declaration"},{"location":"structures/Command_flags/#fields","text":"Field Type Description guildOnly boolean nsfwOnly boolean ownerOnly boolean","title":"Fields"},{"location":"structures/DiscordiaOptions/","text":"Structure DiscordiaOptions \u00b6 The options to pass to the discordia client Declaration \u00b6 local DiscordiaOptions = { maxRetries = number , cacheAllMembers = boolean , firstShard = number , autoReconnect = boolean , gatewayFile = string , shardCount = number , syncGuilds = boolean , compress = boolean , dateTime = string , logLevel = number , bitrate = number , routeDelay = number , logFile = string , largeThreshold = number , lastShard = number } Fields \u00b6 Field Type Description maxRetries number cacheAllMembers boolean firstShard number autoReconnect boolean gatewayFile string shardCount number syncGuilds boolean compress boolean dateTime string logLevel number bitrate number routeDelay number logFile string largeThreshold number lastShard number","title":"Structure `DiscordiaOptions`"},{"location":"structures/DiscordiaOptions/#structure-discordiaoptions","text":"The options to pass to the discordia client","title":"Structure DiscordiaOptions"},{"location":"structures/DiscordiaOptions/#declaration","text":"local DiscordiaOptions = { maxRetries = number , cacheAllMembers = boolean , firstShard = number , autoReconnect = boolean , gatewayFile = string , shardCount = number , syncGuilds = boolean , compress = boolean , dateTime = string , logLevel = number , bitrate = number , routeDelay = number , logFile = string , largeThreshold = number , lastShard = number }","title":"Declaration"},{"location":"structures/DiscordiaOptions/#fields","text":"Field Type Description maxRetries number cacheAllMembers boolean firstShard number autoReconnect boolean gatewayFile string shardCount number syncGuilds boolean compress boolean dateTime string logLevel number bitrate number routeDelay number logFile string largeThreshold number lastShard number","title":"Fields"},{"location":"structures/Embed.author/","text":"Structure Embed.author \u00b6 Declaration \u00b6 Embed . author = { name = string ? , url = string ? , icon_url = string ? , proxy_icon_url = string ? } Fields \u00b6 Field Type Description name string ? name of author url string ? url of author icon_url string ? url of author icon (only supports http(s) and attachments) proxy_icon_url string ? a proxied url of author icon","title":"Structure `Embed.author`"},{"location":"structures/Embed.author/#structure-embedauthor","text":"","title":"Structure Embed.author"},{"location":"structures/Embed.author/#declaration","text":"Embed . author = { name = string ? , url = string ? , icon_url = string ? , proxy_icon_url = string ? }","title":"Declaration"},{"location":"structures/Embed.author/#fields","text":"Field Type Description name string ? name of author url string ? url of author icon_url string ? url of author icon (only supports http(s) and attachments) proxy_icon_url string ? a proxied url of author icon","title":"Fields"},{"location":"structures/Embed.field/","text":"Structure Embed.field \u00b6 Declaration \u00b6 Embed . field = { name = string , value = string , inline = boolean ? } Fields \u00b6 Field Type Description name string name of the field value string value of the field inline boolean ? whether or not this field should display inline","title":"Structure `Embed.field`"},{"location":"structures/Embed.field/#structure-embedfield","text":"","title":"Structure Embed.field"},{"location":"structures/Embed.field/#declaration","text":"Embed . field = { name = string , value = string , inline = boolean ? }","title":"Declaration"},{"location":"structures/Embed.field/#fields","text":"Field Type Description name string name of the field value string value of the field inline boolean ? whether or not this field should display inline","title":"Fields"},{"location":"structures/Embed.footer/","text":"Structure Embed.footer \u00b6 Declaration \u00b6 Embed . footer = { text = string , icon_url = string ? , proxy_icon_url = string ? } Fields \u00b6 Field Type Description text string footer text icon_url string ? url of footer icon (only supports http(s) and attachments) proxy_icon_url string ? a proxied url of footer icon","title":"Structure `Embed.footer`"},{"location":"structures/Embed.footer/#structure-embedfooter","text":"","title":"Structure Embed.footer"},{"location":"structures/Embed.footer/#declaration","text":"Embed . footer = { text = string , icon_url = string ? , proxy_icon_url = string ? }","title":"Declaration"},{"location":"structures/Embed.footer/#fields","text":"Field Type Description text string footer text icon_url string ? url of footer icon (only supports http(s) and attachments) proxy_icon_url string ? a proxied url of footer icon","title":"Fields"},{"location":"structures/Embed.image/","text":"Structure Embed.image \u00b6 Declaration \u00b6 Embed . image = { url = string ? , proxy_url = string ? , height = number ? , width = number ? } Fields \u00b6 Field Type Description url string ? source url of the thumbnail(only supports http(s) and attachments) proxy_url string ? a proxied url of the thumbnail height number ? height of the thumbnail width number ? width of the thumbnail","title":"Structure `Embed.image`"},{"location":"structures/Embed.image/#structure-embedimage","text":"","title":"Structure Embed.image"},{"location":"structures/Embed.image/#declaration","text":"Embed . image = { url = string ? , proxy_url = string ? , height = number ? , width = number ? }","title":"Declaration"},{"location":"structures/Embed.image/#fields","text":"Field Type Description url string ? source url of the thumbnail(only supports http(s) and attachments) proxy_url string ? a proxied url of the thumbnail height number ? height of the thumbnail width number ? width of the thumbnail","title":"Fields"},{"location":"structures/Embed.provider/","text":"Structure Embed.provider \u00b6 Declaration \u00b6 Embed . provider = { name = string ? , url = string ? } Fields \u00b6 Field Type Description name string ? name of provider url string ? url of provider","title":"Structure `Embed.provider`"},{"location":"structures/Embed.provider/#structure-embedprovider","text":"","title":"Structure Embed.provider"},{"location":"structures/Embed.provider/#declaration","text":"Embed . provider = { name = string ? , url = string ? }","title":"Declaration"},{"location":"structures/Embed.provider/#fields","text":"Field Type Description name string ? name of provider url string ? url of provider","title":"Fields"},{"location":"structures/Embed.raw/","text":"Structure Embed.raw \u00b6 The raw data within an embed Declaration \u00b6 Embed . raw = { title = string ? , type = string ? , description = string ? , url = string ? , timestamp = string ? , color = number ? , footer = Embed . footer ? , image = Embed . image ? , thumbnail = Embed . thumbnail ? , video = Embed . video ? , provider = Embed . provider ? , author = Embed . author ? , fields = Embed . field [] ? } Fields \u00b6 Field Type Description title string ? title of embed type string ? type of embed (always \"rich\" for webhook embeds) description string ? description of embed url string ? url of embed timestamp string ? ISO8601 timestamp of embed content color number ? color code of the embed footer Embed.footer ? footer information image Embed.image ? image information thumbnail Embed.thumbnail ? thumbnail information video Embed.video ? video information provider Embed.provider ? provider information author Embed.author ? author information fields Embed.field [] ? fields information","title":"Structure `Embed.raw`"},{"location":"structures/Embed.raw/#structure-embedraw","text":"The raw data within an embed","title":"Structure Embed.raw"},{"location":"structures/Embed.raw/#declaration","text":"Embed . raw = { title = string ? , type = string ? , description = string ? , url = string ? , timestamp = string ? , color = number ? , footer = Embed . footer ? , image = Embed . image ? , thumbnail = Embed . thumbnail ? , video = Embed . video ? , provider = Embed . provider ? , author = Embed . author ? , fields = Embed . field [] ? }","title":"Declaration"},{"location":"structures/Embed.raw/#fields","text":"Field Type Description title string ? title of embed type string ? type of embed (always \"rich\" for webhook embeds) description string ? description of embed url string ? url of embed timestamp string ? ISO8601 timestamp of embed content color number ? color code of the embed footer Embed.footer ? footer information image Embed.image ? image information thumbnail Embed.thumbnail ? thumbnail information video Embed.video ? video information provider Embed.provider ? provider information author Embed.author ? author information fields Embed.field [] ? fields information","title":"Fields"},{"location":"structures/Embed.thumbnail/","text":"Structure Embed.thumbnail \u00b6 Declaration \u00b6 Embed . thumbnail = { url = string ? , proxy_url = string ? , height = number ? , width = number ? } Fields \u00b6 Field Type Description url string ? source url of the thumbnail(only supports http(s) and attachments) proxy_url string ? a proxied url of the thumbnail height number ? height of the thumbnail width number ? width of the thumbnail","title":"Structure `Embed.thumbnail`"},{"location":"structures/Embed.thumbnail/#structure-embedthumbnail","text":"","title":"Structure Embed.thumbnail"},{"location":"structures/Embed.thumbnail/#declaration","text":"Embed . thumbnail = { url = string ? , proxy_url = string ? , height = number ? , width = number ? }","title":"Declaration"},{"location":"structures/Embed.thumbnail/#fields","text":"Field Type Description url string ? source url of the thumbnail(only supports http(s) and attachments) proxy_url string ? a proxied url of the thumbnail height number ? height of the thumbnail width number ? width of the thumbnail","title":"Fields"},{"location":"structures/Embed.video/","text":"Structure Embed.video \u00b6 Declaration \u00b6 Embed . video = { url = string ? , height = number ? , width = number ? } Fields \u00b6 Field Type Description url string ? source url of video height number ? height of the video width number ? width of the video","title":"Structure `Embed.video`"},{"location":"structures/Embed.video/#structure-embedvideo","text":"","title":"Structure Embed.video"},{"location":"structures/Embed.video/#declaration","text":"Embed . video = { url = string ? , height = number ? , width = number ? }","title":"Declaration"},{"location":"structures/Embed.video/#fields","text":"Field Type Description url string ? source url of video height number ? height of the video width number ? width of the video","title":"Fields"},{"location":"structures/Embed_author/","text":"Structure Embed_author \u00b6 Declaration \u00b6 local Embed_author = { name = string ? , url = string ? , icon_url = string ? , proxy_icon_url = string ? } Fields \u00b6 Field Type Description name string ? name of author url string ? url of author icon_url string ? url of author icon (only supports http(s) and attachments) proxy_icon_url string ? a proxied url of author icon","title":"Structure `Embed_author`"},{"location":"structures/Embed_author/#structure-embed_author","text":"","title":"Structure Embed_author"},{"location":"structures/Embed_author/#declaration","text":"local Embed_author = { name = string ? , url = string ? , icon_url = string ? , proxy_icon_url = string ? }","title":"Declaration"},{"location":"structures/Embed_author/#fields","text":"Field Type Description name string ? name of author url string ? url of author icon_url string ? url of author icon (only supports http(s) and attachments) proxy_icon_url string ? a proxied url of author icon","title":"Fields"},{"location":"structures/Embed_field/","text":"Structure Embed_field \u00b6 Declaration \u00b6 local Embed_field = { name = string , value = string , inline = boolean ? } Fields \u00b6 Field Type Description name string name of the field value string value of the field inline boolean ? whether or not this field should display inline","title":"Structure `Embed_field`"},{"location":"structures/Embed_field/#structure-embed_field","text":"","title":"Structure Embed_field"},{"location":"structures/Embed_field/#declaration","text":"local Embed_field = { name = string , value = string , inline = boolean ? }","title":"Declaration"},{"location":"structures/Embed_field/#fields","text":"Field Type Description name string name of the field value string value of the field inline boolean ? whether or not this field should display inline","title":"Fields"},{"location":"structures/Embed_footer/","text":"Structure Embed_footer \u00b6 Declaration \u00b6 local Embed_footer = { text = string , icon_url = string ? , proxy_icon_url = string ? } Fields \u00b6 Field Type Description text string footer text icon_url string ? url of footer icon (only supports http(s) and attachments) proxy_icon_url string ? a proxied url of footer icon","title":"Structure `Embed_footer`"},{"location":"structures/Embed_footer/#structure-embed_footer","text":"","title":"Structure Embed_footer"},{"location":"structures/Embed_footer/#declaration","text":"local Embed_footer = { text = string , icon_url = string ? , proxy_icon_url = string ? }","title":"Declaration"},{"location":"structures/Embed_footer/#fields","text":"Field Type Description text string footer text icon_url string ? url of footer icon (only supports http(s) and attachments) proxy_icon_url string ? a proxied url of footer icon","title":"Fields"},{"location":"structures/Embed_image/","text":"Structure Embed_image \u00b6 Declaration \u00b6 local Embed_image = { url = string ? , proxy_url = string ? , height = number ? , width = number ? } Fields \u00b6 Field Type Description url string ? source url of the thumbnail(only supports http(s) and attachments) proxy_url string ? a proxied url of the thumbnail height number ? height of the thumbnail width number ? width of the thumbnail","title":"Structure `Embed_image`"},{"location":"structures/Embed_image/#structure-embed_image","text":"","title":"Structure Embed_image"},{"location":"structures/Embed_image/#declaration","text":"local Embed_image = { url = string ? , proxy_url = string ? , height = number ? , width = number ? }","title":"Declaration"},{"location":"structures/Embed_image/#fields","text":"Field Type Description url string ? source url of the thumbnail(only supports http(s) and attachments) proxy_url string ? a proxied url of the thumbnail height number ? height of the thumbnail width number ? width of the thumbnail","title":"Fields"},{"location":"structures/Embed_provider/","text":"Structure Embed_provider \u00b6 Declaration \u00b6 local Embed_provider = { name = string ? , url = string ? } Fields \u00b6 Field Type Description name string ? name of provider url string ? url of provider","title":"Structure `Embed_provider`"},{"location":"structures/Embed_provider/#structure-embed_provider","text":"","title":"Structure Embed_provider"},{"location":"structures/Embed_provider/#declaration","text":"local Embed_provider = { name = string ? , url = string ? }","title":"Declaration"},{"location":"structures/Embed_provider/#fields","text":"Field Type Description name string ? name of provider url string ? url of provider","title":"Fields"},{"location":"structures/Embed_raw/","text":"Structure Embed_raw \u00b6 The raw data within an embed Declaration \u00b6 local Embed_raw = { title = string ? , type = string ? , description = string ? , url = string ? , timestamp = string ? , color = number ? , footer = Embed_footer ? , image = Embed_image ? , thumbnail = Embed_thumbnail ? , video = Embed_video ? , provider = Embed_provider ? , author = Embed_author ? , fields = Embed_field [] ? } Fields \u00b6 Field Type Description title string ? title of embed type string ? type of embed (always \"rich\" for webhook embeds) description string ? description of embed url string ? url of embed timestamp string ? ISO8601 timestamp of embed content color number ? color code of the embed footer Embed_footer ? footer information image Embed_image ? image information thumbnail Embed_thumbnail ? thumbnail information video Embed_video ? video information provider Embed_provider ? provider information author Embed_author ? author information fields Embed_field [] ? fields information","title":"Structure `Embed_raw`"},{"location":"structures/Embed_raw/#structure-embed_raw","text":"The raw data within an embed","title":"Structure Embed_raw"},{"location":"structures/Embed_raw/#declaration","text":"local Embed_raw = { title = string ? , type = string ? , description = string ? , url = string ? , timestamp = string ? , color = number ? , footer = Embed_footer ? , image = Embed_image ? , thumbnail = Embed_thumbnail ? , video = Embed_video ? , provider = Embed_provider ? , author = Embed_author ? , fields = Embed_field [] ? }","title":"Declaration"},{"location":"structures/Embed_raw/#fields","text":"Field Type Description title string ? title of embed type string ? type of embed (always \"rich\" for webhook embeds) description string ? description of embed url string ? url of embed timestamp string ? ISO8601 timestamp of embed content color number ? color code of the embed footer Embed_footer ? footer information image Embed_image ? image information thumbnail Embed_thumbnail ? thumbnail information video Embed_video ? video information provider Embed_provider ? provider information author Embed_author ? author information fields Embed_field [] ? fields information","title":"Fields"},{"location":"structures/Embed_thumbnail/","text":"Structure Embed_thumbnail \u00b6 Declaration \u00b6 local Embed_thumbnail = { url = string ? , proxy_url = string ? , height = number ? , width = number ? } Fields \u00b6 Field Type Description url string ? source url of the thumbnail(only supports http(s) and attachments) proxy_url string ? a proxied url of the thumbnail height number ? height of the thumbnail width number ? width of the thumbnail","title":"Structure `Embed_thumbnail`"},{"location":"structures/Embed_thumbnail/#structure-embed_thumbnail","text":"","title":"Structure Embed_thumbnail"},{"location":"structures/Embed_thumbnail/#declaration","text":"local Embed_thumbnail = { url = string ? , proxy_url = string ? , height = number ? , width = number ? }","title":"Declaration"},{"location":"structures/Embed_thumbnail/#fields","text":"Field Type Description url string ? source url of the thumbnail(only supports http(s) and attachments) proxy_url string ? a proxied url of the thumbnail height number ? height of the thumbnail width number ? width of the thumbnail","title":"Fields"},{"location":"structures/Embed_video/","text":"Structure Embed_video \u00b6 Declaration \u00b6 local Embed_video = { url = string ? , height = number ? , width = number ? } Fields \u00b6 Field Type Description url string ? source url of video height number ? height of the video width number ? width of the video","title":"Structure `Embed_video`"},{"location":"structures/Embed_video/#structure-embed_video","text":"","title":"Structure Embed_video"},{"location":"structures/Embed_video/#declaration","text":"local Embed_video = { url = string ? , height = number ? , width = number ? }","title":"Declaration"},{"location":"structures/Embed_video/#fields","text":"Field Type Description url string ? source url of video height number ? height of the video width number ? width of the video","title":"Fields"},{"location":"structures/SuperToastOptions/","text":"Structure SuperToastOptions \u00b6 The options to pass to the SuperToast client Declaration \u00b6 local SuperToastOptions = { commandHandler = function ( client : SuperToastClient , msg : Message ), errorResolver = function ( cmd : Command , err : string ): string , owners = string [], prefix = string | string [] | function ( msg : Message ): string | string [] } Fields \u00b6 Field Type Description commandHandler fun(client: SuperToastClient , msg: Message) The function to call to handle a command errorResolver fun(cmd: Command , err: string ): string The function to call to parse an error message owners string [] The ids of the people who own the bot prefix string | string [] | fun(msg: Message): string | string [] The prefix/prefixes/function to call to get a prefix/prefixes","title":"Structure `SuperToastOptions`"},{"location":"structures/SuperToastOptions/#structure-supertoastoptions","text":"The options to pass to the SuperToast client","title":"Structure SuperToastOptions"},{"location":"structures/SuperToastOptions/#declaration","text":"local SuperToastOptions = { commandHandler = function ( client : SuperToastClient , msg : Message ), errorResolver = function ( cmd : Command , err : string ): string , owners = string [], prefix = string | string [] | function ( msg : Message ): string | string [] }","title":"Declaration"},{"location":"structures/SuperToastOptions/#fields","text":"Field Type Description commandHandler fun(client: SuperToastClient , msg: Message) The function to call to handle a command errorResolver fun(cmd: Command , err: string ): string The function to call to parse an error message owners string [] The ids of the people who own the bot prefix string | string [] | fun(msg: Message): string | string [] The prefix/prefixes/function to call to get a prefix/prefixes","title":"Fields"},{"location":"topics/arguments/","text":"Arguments \u00b6 Adding numbers \u00b6 In SuperToast, advanced arguments are not forced allowing for basic commands to not need to use them. In this example, we will show 2 ways of making a command that adds its 2 arguments, one with ArgParse (Built in advanced argument parser) and the other with the default split arguments. Simple \u00b6 In the simple method, we take 2 arguments, typecast, add, and then return the output. local add = toast . Command ( 'add' ) add : execute ( function ( msg , args ) local num1 = tonumber ( args [ 1 ] or '' ) local num2 = tonumber ( args [ 2 ] or '' ) if not num1 or not num2 then return msg : reply ( 'Argument 1 and 2 must be numbers' ) end msg : reply ( num1 + num2 ) end ) This is a pretty simple way of doing this, however, the user feedback is a bit lacking when it comes to errors. This is where advanced argument parsing comes in. Advanced \u00b6 In the advanced method, we take advantage of the ArgParse class part of SuperToast. local add = toast . Command ( 'add' ) local addParser = toast . ArgParser () : arg ( 'number' ) : arg ( 'number' ) add : execute ( function ( msg , args ) msg : reply ( args . arguments [ 1 ] + args . arguments [ 2 ]) end ) addParser : attach ( add ) This is a bit longer but it gives much better errors. If we run something like !add 1 \"pineapple\" we get: error[incorrect_argument_type]: Unable to convert argument 2 to number \u250c\u2500 input \u2502 \u2502 1 \"pineapple\" \u2502 ^^^^^^^^^^^ Cannot convert `pineapple` to a number Which is a very friendly and understandable error message. Flags \u00b6 Flags are another feature of the advanced argument parser. They have more features then arguments (for now) like greedy parsers, ranges and more. To make a flag, you first want to call the method :flag on an argument parser. local parser = toast . ArgParser () : flag ( 'name' , 'type' ) Next we want to add some modifiers like setting the flag to required or changing the arguments it takes. local parser = toast . ArgParser () : flag ( 'name' , 'type' ) . args ( '1' ) Finally we add a .finish() after .args in order to finalize the flag. local parser = toast . ArgParser () : flag ( 'name' , 'type' ) . args ( '1' ) . finish () The strings you can pass to .args would be num - Expect exactly this amount of arguments min-max - Expect arguments between the min and max (greedy) + - Expect 1 or more arguments (greedy) * - Expect 0 or more arguments (greedy) ? - Expect 0 or 1 arguments What this greedy means is that when the parser reaches the minimum, it'll keep reading until it can't anymore due to another flag or it reaches the max. Soon\u2122\ufe0f ungreedy arguments will be supported. Types \u00b6 Currently SuperToast supports these types: string - Do nothing number - Attempt to typecast to number boolean - Attempt to typecast to boolean int - Attempt to typecast to a whole number (math.floor(input) == input) command - Check if the input is the name of a valid command then typecast user - Check if the input is either a user id, user mention, or username then typecast to a User","title":"Arguments"},{"location":"topics/arguments/#arguments","text":"","title":"Arguments"},{"location":"topics/arguments/#adding-numbers","text":"In SuperToast, advanced arguments are not forced allowing for basic commands to not need to use them. In this example, we will show 2 ways of making a command that adds its 2 arguments, one with ArgParse (Built in advanced argument parser) and the other with the default split arguments.","title":"Adding numbers"},{"location":"topics/arguments/#simple","text":"In the simple method, we take 2 arguments, typecast, add, and then return the output. local add = toast . Command ( 'add' ) add : execute ( function ( msg , args ) local num1 = tonumber ( args [ 1 ] or '' ) local num2 = tonumber ( args [ 2 ] or '' ) if not num1 or not num2 then return msg : reply ( 'Argument 1 and 2 must be numbers' ) end msg : reply ( num1 + num2 ) end ) This is a pretty simple way of doing this, however, the user feedback is a bit lacking when it comes to errors. This is where advanced argument parsing comes in.","title":"Simple"},{"location":"topics/arguments/#advanced","text":"In the advanced method, we take advantage of the ArgParse class part of SuperToast. local add = toast . Command ( 'add' ) local addParser = toast . ArgParser () : arg ( 'number' ) : arg ( 'number' ) add : execute ( function ( msg , args ) msg : reply ( args . arguments [ 1 ] + args . arguments [ 2 ]) end ) addParser : attach ( add ) This is a bit longer but it gives much better errors. If we run something like !add 1 \"pineapple\" we get: error[incorrect_argument_type]: Unable to convert argument 2 to number \u250c\u2500 input \u2502 \u2502 1 \"pineapple\" \u2502 ^^^^^^^^^^^ Cannot convert `pineapple` to a number Which is a very friendly and understandable error message.","title":"Advanced"},{"location":"topics/arguments/#flags","text":"Flags are another feature of the advanced argument parser. They have more features then arguments (for now) like greedy parsers, ranges and more. To make a flag, you first want to call the method :flag on an argument parser. local parser = toast . ArgParser () : flag ( 'name' , 'type' ) Next we want to add some modifiers like setting the flag to required or changing the arguments it takes. local parser = toast . ArgParser () : flag ( 'name' , 'type' ) . args ( '1' ) Finally we add a .finish() after .args in order to finalize the flag. local parser = toast . ArgParser () : flag ( 'name' , 'type' ) . args ( '1' ) . finish () The strings you can pass to .args would be num - Expect exactly this amount of arguments min-max - Expect arguments between the min and max (greedy) + - Expect 1 or more arguments (greedy) * - Expect 0 or more arguments (greedy) ? - Expect 0 or 1 arguments What this greedy means is that when the parser reaches the minimum, it'll keep reading until it can't anymore due to another flag or it reaches the max. Soon\u2122\ufe0f ungreedy arguments will be supported.","title":"Flags"},{"location":"topics/arguments/#types","text":"Currently SuperToast supports these types: string - Do nothing number - Attempt to typecast to number boolean - Attempt to typecast to boolean int - Attempt to typecast to a whole number (math.floor(input) == input) command - Check if the input is the name of a valid command then typecast user - Check if the input is either a user id, user mention, or username then typecast to a User","title":"Types"},{"location":"topics/command-checks/","text":"Command Checks \u00b6 Channel Restrictions \u00b6 If a command needs to be ran within a guild, a simple check can be used. local nickname = toast . Command ( 'nickname' ) : guildOnly () -- The `guildOnly` check makes sure that the command is ran within a guild ---@param msg Message nickname : execute ( function ( msg ) msg : reply ( 'Your nickname is ' .. msg . member . nickname ) end ) If you are making your own error handler, the GUILD_ONLY code is thrown whenever this check fails. If a command is considered NSFW (Not safe for work) then you can use the :nsfwOnly check. local cool = toast . Command ( 'cool' ) : nsfwOnly () ---@param msg Message cool : execute ( function ( msg ) msg : reply ( 'This channel is cool' ) end ) This throws a NSFW_ONLY code when the check fails. Owner Only \u00b6 Sometimes you want a command to only be owner only like an eval/exec command. This can be done with the :ownerOnly check. local exec = toast . Command ( 'exec' ) : ownerOnly () ---@param msg Message exec : execute ( function ( msg , args ) -- Don't actually do this, the process will not be cleaned up and if the stdout is >2000 characters, an error is thrown msg : reply ( io.popen ( table.concat ( args , ' ' )): read ( '*a' )) end ) This throws a OWNER_ONLY code when the check fails. Permissions \u00b6 Some commands should only be able to be used by users with the correct permissions like moderation commands. This can be done with the checks :hasPermission and :botHasPermission , both of which automatically enable :guildOnly . local ban = toast . Command ( 'ban' ) : hasPermission ( 'banMembers' ) : botHasPermissions ( 'banMembers' ) ban : execute ( function ( msg ) -- Argument parsing end ) These throw MISSING_PERMISSIONS and SELF_MISSING_PERMISSIONS codes when they have failed. Roles \u00b6 Some commands you might want only a specific role to be able to run like with permission-less moderation. local ban = toast . Command ( 'ban' ) : hasRole ( 'banMembers' ) : botHasPermissions ( 'banMembers' ) ban : execute ( function ( msg ) -- Argument parsing end ) :hasRole and :botHasRole throw MISSING_ROLES and SELF_MISSING_ROLES codes when they have failed. Cooldowns \u00b6 Cooldowns are a way to timeout users from using commands too fast. local slow = toast . Command ( 'slow' ) : cooldown ( 5 ) slow : execute ( function ( msg ) msg : reply ( 'Now wait 5 second' ) end ) Note: The cooldown is in seconds . Cooldowns do not throw errors currently. Custom \u00b6 Custom checks are a way for addons to SuperToast to add custom logic. An example of this would be the built in ArgParse . local greetParser = toast . ArgParser () : flag ( 'users' , 'user' ) . args ( '+' ) . finish () greetCmd : execute ( function ( msg , args ) local greet = '' for i = 1 , # args . users do greet = greet .. 'Hello ' .. args . users [ i ]. username .. '! \\n ' end msg : reply ( greet ) end ) greetParser : attach ( greetCmd ) Behind the scenes, greetParser:attach adds a custom check. Custom checks return CUSTOM_* where * can be anything, they also can return an additional message which should replace the check failing message.","title":"Command Checks"},{"location":"topics/command-checks/#command-checks","text":"","title":"Command Checks"},{"location":"topics/command-checks/#channel-restrictions","text":"If a command needs to be ran within a guild, a simple check can be used. local nickname = toast . Command ( 'nickname' ) : guildOnly () -- The `guildOnly` check makes sure that the command is ran within a guild ---@param msg Message nickname : execute ( function ( msg ) msg : reply ( 'Your nickname is ' .. msg . member . nickname ) end ) If you are making your own error handler, the GUILD_ONLY code is thrown whenever this check fails. If a command is considered NSFW (Not safe for work) then you can use the :nsfwOnly check. local cool = toast . Command ( 'cool' ) : nsfwOnly () ---@param msg Message cool : execute ( function ( msg ) msg : reply ( 'This channel is cool' ) end ) This throws a NSFW_ONLY code when the check fails.","title":"Channel Restrictions"},{"location":"topics/command-checks/#owner-only","text":"Sometimes you want a command to only be owner only like an eval/exec command. This can be done with the :ownerOnly check. local exec = toast . Command ( 'exec' ) : ownerOnly () ---@param msg Message exec : execute ( function ( msg , args ) -- Don't actually do this, the process will not be cleaned up and if the stdout is >2000 characters, an error is thrown msg : reply ( io.popen ( table.concat ( args , ' ' )): read ( '*a' )) end ) This throws a OWNER_ONLY code when the check fails.","title":"Owner Only"},{"location":"topics/command-checks/#permissions","text":"Some commands should only be able to be used by users with the correct permissions like moderation commands. This can be done with the checks :hasPermission and :botHasPermission , both of which automatically enable :guildOnly . local ban = toast . Command ( 'ban' ) : hasPermission ( 'banMembers' ) : botHasPermissions ( 'banMembers' ) ban : execute ( function ( msg ) -- Argument parsing end ) These throw MISSING_PERMISSIONS and SELF_MISSING_PERMISSIONS codes when they have failed.","title":"Permissions"},{"location":"topics/command-checks/#roles","text":"Some commands you might want only a specific role to be able to run like with permission-less moderation. local ban = toast . Command ( 'ban' ) : hasRole ( 'banMembers' ) : botHasPermissions ( 'banMembers' ) ban : execute ( function ( msg ) -- Argument parsing end ) :hasRole and :botHasRole throw MISSING_ROLES and SELF_MISSING_ROLES codes when they have failed.","title":"Roles"},{"location":"topics/command-checks/#cooldowns","text":"Cooldowns are a way to timeout users from using commands too fast. local slow = toast . Command ( 'slow' ) : cooldown ( 5 ) slow : execute ( function ( msg ) msg : reply ( 'Now wait 5 second' ) end ) Note: The cooldown is in seconds . Cooldowns do not throw errors currently.","title":"Cooldowns"},{"location":"topics/command-checks/#custom","text":"Custom checks are a way for addons to SuperToast to add custom logic. An example of this would be the built in ArgParse . local greetParser = toast . ArgParser () : flag ( 'users' , 'user' ) . args ( '+' ) . finish () greetCmd : execute ( function ( msg , args ) local greet = '' for i = 1 , # args . users do greet = greet .. 'Hello ' .. args . users [ i ]. username .. '! \\n ' end msg : reply ( greet ) end ) greetParser : attach ( greetCmd ) Behind the scenes, greetParser:attach adds a custom check. Custom checks return CUSTOM_* where * can be anything, they also can return an additional message which should replace the check failing message.","title":"Custom"},{"location":"topics/comparison/","text":"Comparison \u00b6 Here is a small comparison to other Discordia frameworks/command handlers. The frameworks compared are: SuperToast Toast Commandia (dev branch) Points \u00b6 Here are some things to consider when choosing a framework for your bot. Metadata \u00b6 Information about the package itself and not any of the functionality. Discordia is not counted as a dependency. Metadata SuperToast Toast Commandia Version 0.7.1 1.3.1 0.0.1 Discordia version 2.8.4 2.8.4 N/A (No package.lua) Typings \u2713 \u2718 \u2718 Dependencies* 0 0 0 Documentation SuperToast Toast None Command Parsing \u00b6 Parsing is how each framework deals with parsing given input. Command Parsing SuperToast Toast Commandia Aliases \u2713 \u2713 \u2713 Mention as prefix \u2718 \u2713 \u2718 Multiple prefixes \u2713 \u2713 \u2713 Per-guild prefix customization \u2713 \u2713 \u2713 Pattern trigger \u2713 \u2718 \u2718 Store original input \u2713 \u2713 \u2713 Command Handling \u00b6 Command handling is how each framework will handle a command once one has been identified. Things like cooldowns and other things. Command Handling SuperToast Toast Commandia Cooldowns \u2713 \u2713 \u2718 Channel restrictions \u2713 \u2713 \u2718 Permission restrictions \u2713 \u2713 \u2713 Command edits \u2718 \u2718 \u2718 Subcommands \u2713 \u2713 \u2718 Help information \u2713 \u2713 \u2718 Argument Parsing \u00b6 Argument parsing is the final step before starting to do what the user wants. For matching, the parser should support more than just the id like the object name. Argument Parsing SuperToast Toast Commandia Ordered arguments \u2713 \u2713 \u2713 Unordered arguments \u2718 \u2718 \u2718 Optional arguments \u2718 \u2713 \u2713 Quoted arguments \u2713 \u2713 \u2713 Flag arguments \u2713 \u2713 \u2713 Dependant arguments \u2718 \u2713 \u2713 Argument types \u2713 \u2713 \u2713 Union types \u2718 \u2718 \u2718 Custom types \u2713 \u2713 \u2713 User and member matching \u2713 \u2718 \u2718 Role matching \u2718 \u2718 \u2718 Channel matching \u2718 \u2718 \u2718 Pattern arguments \u2718 \u2718 \u2718 Module System \u00b6 A module system allows for loading modules automatically. It also defines how new modules like commands are created and loaded. Module System SuperToast Toast Commandia Tables \u2718 N/A \u2713 Functions \u2718 N/A \u2713 Classes \u2713 N/A \u2713 Recursive loading \u2713 N/A \u2718 Loading and unloading \u2713 N/A \u2713 Reloading \u2713 N/A \u2713 Directory watch \u2713 N/A \u2713 Events \u00b6 Frameworks might fire events depending on whenever a command is reloaded or unloaded. / indicates that it has the event in some form but not emitted. Events SuperToast Toast Commandia Module event listeners \u2713 N/A \u2713 On invalid commands \u2718 \u2718 \u2718 On command blocked / \u2718 \u2718 On command start \u2718 \u2713 \u2718 On command end \u2718 \u2713 \u2718 On command error \u2713 \u2713 \u2713 Settings \u00b6 All frameworks should have some sort of config to configure how things are handled like owners. Built-in features are marked with a \u2713 means they exist and are modifiable. If they are marked with \u2718 it means they exist but not modifiable. \u2205 indicates that the feature doesn't exist. Settings SuperToast Toast Commandia Modifiable built-in commands \u2718 \u2718 \u2205 Modifiable built-in command handler \u2713 \u2713 \u2718 Modifiable built-in responses \u2713 \u2718 \u2718 Bot owner \u2713 \u2713 \u2713 Multiple owners \u2713 \u2713 \u2205 Module directories \u2713 N/A \u2713","title":"Comparison"},{"location":"topics/comparison/#comparison","text":"Here is a small comparison to other Discordia frameworks/command handlers. The frameworks compared are: SuperToast Toast Commandia (dev branch)","title":"Comparison"},{"location":"topics/comparison/#points","text":"Here are some things to consider when choosing a framework for your bot.","title":"Points"},{"location":"topics/comparison/#metadata","text":"Information about the package itself and not any of the functionality. Discordia is not counted as a dependency. Metadata SuperToast Toast Commandia Version 0.7.1 1.3.1 0.0.1 Discordia version 2.8.4 2.8.4 N/A (No package.lua) Typings \u2713 \u2718 \u2718 Dependencies* 0 0 0 Documentation SuperToast Toast None","title":"Metadata"},{"location":"topics/comparison/#command-parsing","text":"Parsing is how each framework deals with parsing given input. Command Parsing SuperToast Toast Commandia Aliases \u2713 \u2713 \u2713 Mention as prefix \u2718 \u2713 \u2718 Multiple prefixes \u2713 \u2713 \u2713 Per-guild prefix customization \u2713 \u2713 \u2713 Pattern trigger \u2713 \u2718 \u2718 Store original input \u2713 \u2713 \u2713","title":"Command Parsing"},{"location":"topics/comparison/#command-handling","text":"Command handling is how each framework will handle a command once one has been identified. Things like cooldowns and other things. Command Handling SuperToast Toast Commandia Cooldowns \u2713 \u2713 \u2718 Channel restrictions \u2713 \u2713 \u2718 Permission restrictions \u2713 \u2713 \u2713 Command edits \u2718 \u2718 \u2718 Subcommands \u2713 \u2713 \u2718 Help information \u2713 \u2713 \u2718","title":"Command Handling"},{"location":"topics/comparison/#argument-parsing","text":"Argument parsing is the final step before starting to do what the user wants. For matching, the parser should support more than just the id like the object name. Argument Parsing SuperToast Toast Commandia Ordered arguments \u2713 \u2713 \u2713 Unordered arguments \u2718 \u2718 \u2718 Optional arguments \u2718 \u2713 \u2713 Quoted arguments \u2713 \u2713 \u2713 Flag arguments \u2713 \u2713 \u2713 Dependant arguments \u2718 \u2713 \u2713 Argument types \u2713 \u2713 \u2713 Union types \u2718 \u2718 \u2718 Custom types \u2713 \u2713 \u2713 User and member matching \u2713 \u2718 \u2718 Role matching \u2718 \u2718 \u2718 Channel matching \u2718 \u2718 \u2718 Pattern arguments \u2718 \u2718 \u2718","title":"Argument Parsing"},{"location":"topics/comparison/#module-system","text":"A module system allows for loading modules automatically. It also defines how new modules like commands are created and loaded. Module System SuperToast Toast Commandia Tables \u2718 N/A \u2713 Functions \u2718 N/A \u2713 Classes \u2713 N/A \u2713 Recursive loading \u2713 N/A \u2718 Loading and unloading \u2713 N/A \u2713 Reloading \u2713 N/A \u2713 Directory watch \u2713 N/A \u2713","title":"Module System"},{"location":"topics/comparison/#events","text":"Frameworks might fire events depending on whenever a command is reloaded or unloaded. / indicates that it has the event in some form but not emitted. Events SuperToast Toast Commandia Module event listeners \u2713 N/A \u2713 On invalid commands \u2718 \u2718 \u2718 On command blocked / \u2718 \u2718 On command start \u2718 \u2713 \u2718 On command end \u2718 \u2713 \u2718 On command error \u2713 \u2713 \u2713","title":"Events"},{"location":"topics/comparison/#settings","text":"All frameworks should have some sort of config to configure how things are handled like owners. Built-in features are marked with a \u2713 means they exist and are modifiable. If they are marked with \u2718 it means they exist but not modifiable. \u2205 indicates that the feature doesn't exist. Settings SuperToast Toast Commandia Modifiable built-in commands \u2718 \u2718 \u2205 Modifiable built-in command handler \u2713 \u2713 \u2718 Modifiable built-in responses \u2713 \u2718 \u2718 Bot owner \u2713 \u2713 \u2713 Multiple owners \u2713 \u2713 \u2205 Module directories \u2713 N/A \u2713","title":"Settings"},{"location":"topics/types/","text":"Types \u00b6 Types are one of the biggest benefits to using SuperToast. Before we get there you should install either Lua by sumneko or Emmylua You can test if things went correctly by writing something like this: ---@type Message local msg = {} Now if we index the message we see its properties, if you don't then EmmyLua isn't running and/or the types are not setup correctly. Sometimes you may need to do this as a variable might not be known to EmmyLua. This will not work in events so in order to get it to work in events we use a different comment. ---@param msg Message client : on ( 'messageCreate' , function ( msg ) end ) EmmyLua will see the function we defined and make msg have the properties as Message (Note this will not change anything during runtime) There are more but that's usually what you are going to use. You can check the rest at the EmmyLua Docs . SuperToast Types \u00b6 All of the types of SuperToast are listed in the api reference, the names are the same. Discordia Types \u00b6 All of the types of Discordia are listed within the Discordia wiki and names have not been touched.","title":"Types"},{"location":"topics/types/#types","text":"Types are one of the biggest benefits to using SuperToast. Before we get there you should install either Lua by sumneko or Emmylua You can test if things went correctly by writing something like this: ---@type Message local msg = {} Now if we index the message we see its properties, if you don't then EmmyLua isn't running and/or the types are not setup correctly. Sometimes you may need to do this as a variable might not be known to EmmyLua. This will not work in events so in order to get it to work in events we use a different comment. ---@param msg Message client : on ( 'messageCreate' , function ( msg ) end ) EmmyLua will see the function we defined and make msg have the properties as Message (Note this will not change anything during runtime) There are more but that's usually what you are going to use. You can check the rest at the EmmyLua Docs .","title":"Types"},{"location":"topics/types/#supertoast-types","text":"All of the types of SuperToast are listed in the api reference, the names are the same.","title":"SuperToast Types"},{"location":"topics/types/#discordia-types","text":"All of the types of Discordia are listed within the Discordia wiki and names have not been touched.","title":"Discordia Types"},{"location":"topics/writing-your-first-bot/","text":"Writing your first bot \u00b6 Making a bot with SuperToast is a breeze thanks to all its utilities. Installation \u00b6 Before starting to do anything else, you should install the dependencies needed, discordia and SuperToast. lit install SinisterRectus/discordia lit install SovietKitsune/SuperToast (This expects you have added lit to your path ) Now you should make 2 files, main.lua and .env , we will be using these later Once everything is setup you should have a directory structure looking something like this: bot \u251c\u2500\u2500 deps \u251c\u2500\u2500 .env \u2514\u2500\u2500 main.lua .env File \u00b6 The .env file is where you store all your secrets like tokens. Here is an example .env , make sure to replace <TOKEN> with your bot token, make sure you don't prefix bot before it. TOKEN=<TOKEN> Main File \u00b6 From within the main.lua file, you want to create your client and setup the .env file. ---@type SuperToast local toast = require 'SuperToast' toast . dotenv . config () local client = toast . Client ( process . env . TOKEN , { -- SuperToast options }, { -- Discordia options }) client : login () Now within the SuperToast options we might want to configure some things like the prefix. { prefix = '%' -- Could also be an array of strings or a function that returns either one } Ping command \u00b6 To create a command, simply create an instance of a command and add it to the client. -- ... local ping = toast . Command ( 'ping' ) client : addCommand ( ping ) This isn't very useful on its own and will in fact cause an error trying to run the command. Lets add an execute handler. -- ... local ping = toast . Command ( 'ping' ) ---@param msg Message ping : execute ( function ( msg ) msg : reply ( 'Pong!' ) end ) client : addCommand ( ping ) Whenever the command is called, it will call the function specified in execute with the arguments of message , args (string[]), client and additional context Running the bot \u00b6 Now that we have a basic bot, we can now start it. If everything went ok, you should be able to run luvit main.lua Now when you run %ping you should get. Congratulations on your first bot! Now time to add some more functionality. Aliases \u00b6 You might want to add an alias to the ping command. For example, you might want a shorthand to ping to be p . The Command constructor accepts a vararg of strings, those are the aliases. We can add the p alias by simply. - local ping = toast.Command('ping') + local ping = toast.Command('ping', 'p') Next steps \u00b6 Now with the basics of SuperToast down, you might want to checkout the following: Arguments - Adding arguments to commands Checks - Learn about the different kind of checks a command can have Types - Learn about getting intellisense with SuperToast","title":"Writing your first bot"},{"location":"topics/writing-your-first-bot/#writing-your-first-bot","text":"Making a bot with SuperToast is a breeze thanks to all its utilities.","title":"Writing your first bot"},{"location":"topics/writing-your-first-bot/#installation","text":"Before starting to do anything else, you should install the dependencies needed, discordia and SuperToast. lit install SinisterRectus/discordia lit install SovietKitsune/SuperToast (This expects you have added lit to your path ) Now you should make 2 files, main.lua and .env , we will be using these later Once everything is setup you should have a directory structure looking something like this: bot \u251c\u2500\u2500 deps \u251c\u2500\u2500 .env \u2514\u2500\u2500 main.lua","title":"Installation"},{"location":"topics/writing-your-first-bot/#env-file","text":"The .env file is where you store all your secrets like tokens. Here is an example .env , make sure to replace <TOKEN> with your bot token, make sure you don't prefix bot before it. TOKEN=<TOKEN>","title":".env File"},{"location":"topics/writing-your-first-bot/#main-file","text":"From within the main.lua file, you want to create your client and setup the .env file. ---@type SuperToast local toast = require 'SuperToast' toast . dotenv . config () local client = toast . Client ( process . env . TOKEN , { -- SuperToast options }, { -- Discordia options }) client : login () Now within the SuperToast options we might want to configure some things like the prefix. { prefix = '%' -- Could also be an array of strings or a function that returns either one }","title":"Main File"},{"location":"topics/writing-your-first-bot/#ping-command","text":"To create a command, simply create an instance of a command and add it to the client. -- ... local ping = toast . Command ( 'ping' ) client : addCommand ( ping ) This isn't very useful on its own and will in fact cause an error trying to run the command. Lets add an execute handler. -- ... local ping = toast . Command ( 'ping' ) ---@param msg Message ping : execute ( function ( msg ) msg : reply ( 'Pong!' ) end ) client : addCommand ( ping ) Whenever the command is called, it will call the function specified in execute with the arguments of message , args (string[]), client and additional context","title":"Ping command"},{"location":"topics/writing-your-first-bot/#running-the-bot","text":"Now that we have a basic bot, we can now start it. If everything went ok, you should be able to run luvit main.lua Now when you run %ping you should get. Congratulations on your first bot! Now time to add some more functionality.","title":"Running the bot"},{"location":"topics/writing-your-first-bot/#aliases","text":"You might want to add an alias to the ping command. For example, you might want a shorthand to ping to be p . The Command constructor accepts a vararg of strings, those are the aliases. We can add the p alias by simply. - local ping = toast.Command('ping') + local ping = toast.Command('ping', 'p')","title":"Aliases"},{"location":"topics/writing-your-first-bot/#next-steps","text":"Now with the basics of SuperToast down, you might want to checkout the following: Arguments - Adding arguments to commands Checks - Learn about the different kind of checks a command can have Types - Learn about getting intellisense with SuperToast","title":"Next steps"}]}